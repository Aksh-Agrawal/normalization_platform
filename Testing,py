import unittest
from datetime import datetime, timedelta
from new import UnifiedRankingSystem, Platform, User, Course

class TestUnifiedRankingSystem(unittest.TestCase):
    
    def setUp(self):
        """Set up a test environment before each test."""
        self.system = UnifiedRankingSystem(db_path=":memory:")  # Use in-memory DB for testing
        
        # Add test platforms
        self.system.add_platform("TestPlatform1", max_rating=1000)
        self.system.add_platform("TestPlatform2", max_rating=2000)
        
        # Add test users
        self.system.add_user("test_user1")
        self.system.add_user("test_user2")
        
    def test_add_platform(self):
        """Test adding a platform."""
        self.system.add_platform("NewPlatform", max_rating=3000)
        self.assertIn("NewPlatform", self.system.platforms)
        self.assertEqual(self.system.platforms["NewPlatform"].max_rating, 3000)
        
    def test_update_platform_stats(self):
        """Test updating platform statistics."""
        self.system.update_platform_stats(
            "TestPlatform1",
            difficulty=500,
            participation=0.7,
            current_ratings={"test_user1": 800, "test_user2": 700}
        )
        
        platform = self.system.platforms["TestPlatform1"]
        self.assertEqual(platform.difficulty, 0.5)  # 500/1000
        self.assertEqual(platform.participation, 0.7)
        
        user1 = self.system.users["test_user1"]
        self.assertEqual(user1.platform_ratings["TestPlatform1"], 800)

if __name__ == "__main__":
    unittest.main()